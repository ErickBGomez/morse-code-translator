<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label3.Text" xml:space="preserve">
    <value>In the "Type of Input" section select the "Morse" option to be able to write dots "." and dashes "-" to create letters, a space to separate each letter, slashes "/" to separate words. Next, in the "Enter Your Input:" section type what you want to be translated, and then click the "Translate" button, or press the Enter key. The result you will get will be in Plain Text in the "Output" section.

You can consult the following tab "Morse Code Chart" to see all the combinations that can be made in the translator.

Or you can copy the following example and paste it into the translator to see how this app works:



</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>First, in the "Type of Input" section select the "Plain Text" option to be able to write letters from A to Z (UPPERCASE or lowercase), digits from 0 to 9, and also the space to separate each word. Next, in the "Enter Your Input:" section type what you want to be translated, and then click the "Translate" button, or press the Enter key. The result you will get will be in Morse Code in the "Output" section.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAKcAAACnAAAAAAAAAAAA
        AAD///8A////ALKwrkCwrqywrauq/6upqP+pp6X/p6Wj/6Wjof+joZ//oZ+d/5+dm/+dm5n/m5mX/5mX
        lf+YlZP/lpOR/5SSkP+SkI7/kY6M/4+Mi/+Ni4n/jImH/4uIhv+JhoT/iIWD/4eEgv+Gg4H/hYKAsISB
        f0D///8A////AP///wC1s7Jgs7Gw/7Gvrf+vrKv/raup/6qop/+opqX/pqSi/6SioP+ioJ7/oJ6c/56c
        mv+cmpj/m5iW/5mWlP+XlJL/lZKR/5ORj/+Sj43/kI2L/46Miv+Nioj/i4iH/4qHhf+JhoT/h4WD/4aD
        gf+FgoD/hIF//4OAfmD///8Aube2QLa1s/+0s7H/srCv/7Curf+urKr/q6mo/6qnpv+npaT/paOi/6Oh
        n/+hn53/n52b/52bmf+cmZf/mpeV/5iVlP+Wk5L/lJKQ/5OQjv+Rjoz/j42L/46Lif+Mioj/i4iG/4mG
        hf+IhYP/h4SC/4aDgf+FgoD/hIF//4OAfkC6uLewuLa1/7a0sv+zsbD/sa+u/6+tq/+tq6n/q6mn/6im
        pf+npKP/pKKg/6Ogn/+gnpz/n5yb/52amP+bmJb/mZaV/5eUk/+Vk5H/lJGP/5KPjf+Qjoz/j4yK/42K
        if+MiYf/ioeG/4mGhP+HhYP/hoOC/4WCgP+EgX//g4B+sLu6uP+5uLb/t7W0/7Wzsv+ysa//sK6t/66s
        q/+sqqj/qqim/6ilpP+mpKL/pKGg/6Gfnf+gnZz/npua/3Vzcv+Qjo3/mJWU/5aUkv+UkpD/k5CO/5GO
        jf+QjYv/jouJ/4yKiP+LiIb/ioeF/4iFhP+HhIL/hoOB/4WCgP+EgX//vbu6/7u5t/+4trX/trSz/7Sy
        sP+ysK7/r62s/62rqv+rqaf/qael/6elo/+loqH/o6Gf/42Kif8JCQn/AAAA/wAAAP9paGb/l5WT/5aT
        kf+UkY//ko+O/5GOjP+PjIr/jYuJ/4yJh/+Kh4b/iYaE/4iFg/+HhIL/hYKA/4WCgP++vbv/vLq5/7q4
        t/+3tbT/tbOy/7Oxr/+wrq3/r6yr/6yqqf+qqKf/qKak/6akov+koqD/UVBP/wAAAP8AAAD/AAAA/yYm
        Jf+YlpT/l5SS/5WSkP+TkY//kY+N/5CNi/+OjIr/jYqI/4uIh/+Kh4X/iIWE/4eEgv+Gg4H/hYKA/8C+
        vf+9u7r/u7m4/7i3tf+2tbP/tLKx/7Kwr/+wrqz/rauq/6upqP+pp6X/p6Wk/6Wjof9bWln/AAAA/wAA
        AP8AAAD/MC8v/5qXlf+YlZP/lpOR/5SSkP+SkI7/kY6M/4+Mi/+Ni4n/jImH/4uIhv+JhoX/iIWD/4eE
        gv+Gg4H/wb++/7+9vP+8urn/uri3/7i2tP+1s7L/s7Gw/7Gvrf+vrav/raup/6qop/+opqX/pqSi/5qY
        lv8oKCf/AAAA/xMTE/9/fXv/m5iW/5mWlP+XlJP/lZKR/5ORj/+Sj43/kI2L/4+Miv+Nioj/jImH/4qH
        hf+JhoT/h4WD/4aDgf/Cwb//wL69/728uv+7urj/ube2/7e1tP+0s7H/srCv/7Curf+urKr/rKqo/6qn
        pv+npaT/paOi/6Ohn/+XlZP/n52b/56bmv+cmZf/mpeV/5iVlP+Wk5L/lJKQ/5OQjv+Rjoz/j42L/46L
        if+Mioj/i4iG/4qHhf+IhYP/h4SC/8TCwf/BwL7/v728/727uv+6uLf/uLa1/7a0sv+0srD/sa+u/6+t
        q/+tq6n/q6mn/6mnpf+npKP/paKh/6Ogn/+gnpz/n5yb/52amP+bmJf/mZaV/5eUk/+Vk5H/lJGP/5KP
        jv+Qjoz/j4yK/42Kif+MiYf/ioeG/4mGhP+IhYP/xcTC/8PBwP/Av73/vry7/7y6uf+5uLb/t7W0/7Wz
        sv+ysa//sK6t/66sq/+sqqn/qqim/52bmv98e3n/e3l4/3l4dv+gnZz/npua/5yZmP+al5b/mJaU/5aU
        kv+VkpD/k5CO/5GOjf+QjYv/jouJ/42KiP+LiIb/ioeF/4iFhP/GxcT/xMPB/8LAv/+/vbz/vbu6/7u5
        t/+4t7X/trSz/7SysP+ysK7/r62s/62rqv+rqaf/VFNS/wAAAP8AAAD/AAAA/6Genf+fnZv/nZuZ/5uY
        l/+Zl5X/l5WT/5aTkf+UkY//kpCO/5GOjP+PjIr/jYuJ/4yJh/+LiIb/iYaE/8jGxf/GxMP/w8HA/8G/
        vv++vbv/vLq5/7q4t/+3tbT/tbOy/7Oxr/+xr63/r6yr/6yqqf9fXl7/AAAA/wAAAP8AAAD/joyK/6Ce
        nP+enJr/nJqY/5qYlv+ZlpT/l5SS/5WSkP+TkY//kY+N/5CNi/+OjIr/jYqI/4uIh/+Kh4X/ycjH/8fF
        xP/Ew8H/wsG//8C+vf+9vLr/u7m4/7m3tv+2tbP/tLKx/7Kwr/+wrqz/rqyq/5aUk/8AAAD/AAAA/wAA
        AP89PDv/oZ+d/5+dm/+dm5n/m5mX/5qXlf+YlZP/lpOS/5SSkP+SkI7/kY6M/4+Mi/+Oi4n/jImH/4uI
        hv/Lycj/yMfF/8bEw//DwsH/wcC+/7+9vP+8urn/uri3/7i2tP+2tLL/s7Gw/7Gvrf+vrav/raup/yAf
        H/8AAAD/AAAA/wAAAP88PDv/oJ6c/56cmv+dmpj/m5iW/5mWlP+XlJP/lZKR/5SRj/+Sj43/kI2L/4+M
        iv+Nioj/jImH/8zLyv/JyMf/x8bF/8XDwv/DwcD/wL69/768u/+7urj/ube2/7e1tP+0s7H/srGv/7Cu
        rf+urKr/oZ+d/x8fH/8AAAD/AAAA/wAAAP8yMTH/lZOR/56bmv+cmZf/mpeW/5iVlP+Wk5L/lJKQ/5OQ
        jv+Rjo3/j42L/46Lif+Mioj/zczL/8vKyf/Jx8b/xsXE/8TCwf/BwL7/v728/727uv+7ubf/uLa1/7a0
        sv+0srD/sa+u/6+trP+tq6n/oJ6d/x8fHv8AAAD/AAAA/wAAAP8eHR3/lZKR/52amP+bmJf/mZaV/5eV
        k/+Vk5H/lJGP/5KPjv+Qjoz/j4yK/42Kif/Pzs3/zcvK/8rJx//IxsX/xcTC/8PBwP/Av73/vry7/7y6
        uf+5uLb/t7W0/7Wzsv+zsa//sK6t/66sq/+sqqn/n52c/x8fHv8AAAD/AAAA/wAAAP9GRET/npya/5yZ
        mP+amJb/mJaU/5aUkv+VkpD/k5CO/5GPjf+QjYv/jouJ/9HPzv/Ozcv/zMrJ/8nIxv/GxcT/xMPB/8LA
        v//Avr3/vbu6/7u5t/+4t7X/trSz/7Sysf+ysK7/sK6s/62rqv+rqaf/np2b/xQUFP8AAAD/AAAA/wAA
        AP+Bf37/nZuZ/5uZl/+Zl5X/mJWT/5aTkf+UkY//kpCO/5GOjP+PjIv/0tHQ/8/Ozf/NzMr/ysnI/8jH
        xf/GxMP/w8HA/8G/vv++vbv/vLq5/7q4t/+4trT/tbOy/7Oxr/+xr63/r6yr/62rqf+qqKf/SUhH/wAA
        AP8AAAD/AAAA/2RjYf+enJr/nJqY/5qYlv+ZlpT/l5SS/5WSkf+TkY//kY+N/5CNi//T0tH/0dDP/87N
        zP/Mysn/ycjH/8fFxP/Fw8L/wsG//8C+vf+9vLr/u7m4/7m3tv+2tbP/tLOx/7Kwr/+wrqz/rqyq/6up
        qP91c3L/AAAA/wAAAP8AAAD/UE9O/5+dm/+dm5n/nJmX/5qXlf+YlZP/lpOS/5SSkP+TkI7/kY6M/9XT
        0v/S0dD/0M7N/83My//Lycj/yMfF/8bEw//DwsH/wcC+/7+9vP+xr67/XVxb/yIiIf+rqaf/s7Gw/7Gv
        rv+vrav/raup/zU0NP8AAAD/AAAA/wAAAP9RUE//oJ6c/56cmv+dmpj/m5iW/5mWlf+XlJP/lZKR/5SR
        j/+Sj43/1tXU/9TT0f/R0M//z83M/8zLyv/Kycf/x8bF/8XEwv/DwcD/hIKC/wsLC/8AAAD/AAAA/yIh
        If+HhoX/srGv/7Curf9sa2v/AAAA/wAAAP8AAAD/AAAA/3Fubv+hn53/oJ2c/56bmv+cmZf/mpeW/5iV
        lP+WlJL/lJKQ/5OQjv/Y19b/1dTT/9PS0f/Qz87/zs3L/8vKyf/Jx8b/xsXE/8TCwf+qqKf/CwsL/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8fHh7/paKh/6Ogn/+hnp3/n5yb/52b
        mf+bmJf/mZeV/5eVk/+Vk5H/lJGP/9nY1//W1dT/1NPS/9HQz//Pzs3/zcvK/8rJyP/IxsX/xcTC/8PB
        wP+Eg4L/CwsL/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/Pz8+/52cmv+mpKL/pKKg/6Kg
        nv+gnZz/npya/5yZmP+amJb/mJaU/5eUkv+VkpD/29rZ/9jX1v/W1NP/09LR/9HPzv/Ozcv/zMrJ/8nI
        xv/HxcT/xMPB/8LAv/+opqX/Ly4u/wAAAP8AAAD/AAAA/wAAAP8AAAD/CgoK/0tKSv+rqaj/qael/6el
        o/+lo6H/o6Gf/6Gfnf+fnZv/nZuZ/5uZl/+Zl5X/mJWT/5aTkf/c29r/2tnY/9fW1f/V09L/0tHQ/9DO
        zf/NzMr/ysnI/8jHxf/GxMP/w8LB/8G/vv+/vbz/sK6t/4uKif+KiIf/iIaF/4aFhP+xr63/r6yr/62r
        qf+qqKf/qKal/6akov+koqD/oqCe/6CenP+enJr/nJqY/5uYlv+ZlpT/l5SS/9zb2rDb2tn/2djX/9bV
        1P/T0tH/0dDP/87NzP/My8r/ycjH/8fFxP/Fw8L/wsG//8C+vf+9vLr/u7q4/7m3tv+2tbP/tLOx/7Kw
        r/+wrq3/rqyq/6upqP+qp6b/p6Wk/6Wjov+joZ//oZ+d/5+dm/+dm5n/nJmX/5qXlf+YlZSw3NvaQNzb
        2v/a2dj/19bV/9XU0//S0dD/0M7N/83My//Lycj/ycfG/8bEw//EwsH/wcC+/7+9vP+9u7r/uri3/7i2
        tf+2tLL/s7Gw/7Gvrv+vrav/raup/6upp/+pp6X/p6Sj/6SioP+joJ//oJ6c/5+cm/+dmpj/m5iW/5mW
        lUD///8A3NvaYNzb2v/Z2Nf/1tXU/9TT0f/R0M//z83M/83Lyv/Kycf/x8bF/8XEwv/DwcD/wL+9/768
        u/+7urj/ubi2/7e1tP+1s7L/srGv/7Curf+urKv/rKqo/6qopv+opaT/pqSi/6ShoP+hn53/oJ2c/56b
        mv+cmZhg////AP///wD///8A3NvaQNva2bDY19b/1tTT/9PS0f/Qz87/zs3L/8vKyf/JyMb/xsXE/8TC
        wf/CwL//v728/727uv+7ubf/uLa1/7a0s/+0srD/srCu/6+trP+tq6r/q6mn/6mnpf+npaP/paKh/6Oh
        n/+hnp2wn5ybQP///wD///8AwAAAA4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAcAAAAM=
</value>
  </data>
</root>